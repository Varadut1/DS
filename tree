#include<stdio.h>
#include<stdlib.h>
#include<math.h>

struct node {
    struct node *left;
    int data;
    struct node *right;
};
int num_of_nodes=0;

struct node *insert(struct node *root, int data){
    struct node *newnode = malloc(sizeof(struct node));
    if (root == NULL){
        newnode->data=data;
        newnode->left=NULL;
        newnode->right=NULL;
        root=newnode;
    }
    else if (data<=root->data){
        root->left=insert(root->left, data);
    }
    else{
        root->right = insert(root->right, data);
    }
    return root;
}

int min(struct node *root){
    struct node *curr=root;
    if (root == NULL){
        return -1;
    }
    while(curr->left!=NULL){
        curr=curr->left;
    }
    return curr->data;
}
int max(struct node *root){
    struct node *curr=root;
    if (root == NULL){
        return -1;
    }
    while(curr->right!=NULL){
        curr=curr->right;
    }
    return curr->data;
}
int maximum(int l, int r){
    if (l>r){
        return l;
    }
    else{
        return r;
    }
}
int height(struct node *root){
    if (root == NULL){
        return -1;
    }
    return maximum(height(root->left), height(root->right))+1;
}
int preorder(struct node *T){
    if (T!=NULL){
        printf("%d ",T->data);
        num_of_nodes++;
        preorder(T->left);
        preorder(T->right);
    }
}
int inorder(struct node *T){
    if (T!=NULL){
        inorder(T->left);
        printf("%d ", T->data);
        inorder(T->right);
    }
}
int postorder(struct node *T){
    if (T!=NULL){
        postorder(T->left);
        postorder(T->right);
        printf("%d ",T->data);
    }
}

int main(){
    struct node *root=NULL;
    root = insert(root, 15);
    root = insert(root, 12);
    root = insert(root, 13);
    root= insert(root, 1);
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 17);
    root = insert(root, 100);
    root=insert(root, 11);
    root=insert(root, 9);
    root=insert(root, 8);
    printf("Successfully made BST");
    printf("\nSmallest entry is: %d", min(root));
    printf("\nLargest entry is: %d", max(root));
    printf("\nheight: %d\n", height(root));
    preorder(root);
    printf("\n");
    inorder(root);
    printf("\n");
    postorder(root);
    printf("\nnumber of nodes: %d", num_of_nodes);
}


//Traversal
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int num_of_nodes=0;

struct node {
    struct node *left;
    int data;
    struct node *right;
};

struct stack{
    struct node *data;
    struct stack *link;
};
struct stack *top=NULL;

void push(struct node *data){
    struct stack *newnode= malloc(sizeof(struct stack));
    newnode->data=data;
    newnode->link=top;
    top=newnode;
}

struct node *pop(){
    struct stack *newtop=top->link;
    struct node *poped=top->data;
    free(top);
    top=newtop;
    return poped;
}

struct node *peek(){
    return top->data;
}
int isempty()
{
    if(top==NULL){
        return 1;
    }
    else{
        return 0;
    }
}





struct node *insert(struct node *root, int data){
    struct node *newnode = malloc(sizeof(struct node));
    if (root == NULL){
        newnode->data=data;
        newnode->left=NULL;
        newnode->right=NULL;
        root=newnode;
    }
    else if (data<=root->data){
        root->left=insert(root->left, data);
    }
    else{
        root->right = insert(root->right, data);
    }
    return root;
}

int min(struct node *root){
    struct node *curr=root;
    if (root == NULL){
        return -1;
    }
    while(curr->left!=NULL){
        curr=curr->left;
    }
    return curr->data;
}
int max(struct node *root){
    struct node *curr=root;
    if (root == NULL){
        return -1;
    }
    while(curr->right!=NULL){
        curr=curr->right;
    }
    return curr->data;
}
int maximum(int l, int r){
    if (l>r){
        return l;
    }
    else{
        return r;
    }
}
int height(struct node *root){
    if (root == NULL){
        return -1;
    }
    return maximum(height(root->left), height(root->right))+1;
}
int preorder(struct node *T){
    if (T!=NULL){
        printf("%d ",T->data);
        num_of_nodes++;
        preorder(T->left);
        preorder(T->right);
    }
}
int inorder(struct node *T){
    if (T!=NULL){
        inorder(T->left);
        printf("%d ", T->data);
        inorder(T->right);
    }
}
int postorder(struct node *T){
    if (T!=NULL){
        postorder(T->left);
        postorder(T->right);
        printf("%d ",T->data);
    }
}

void preorder_non_recursive(struct node *T){
    while(T!=NULL){
        printf("%d ", T->data);
        push(T);
        T=T->left;
    }
    while(isempty()==0){
        T=pop();
        T=T->right;
        while(T!=NULL){
            printf("%d ", T->data);
            push(T);
            T=T->left;
        }
    }
}

void inorder_non_recursive(struct node *T){
    while(T!=NULL){
        push(T);
        T=T->left;
    }
    while(isempty()==0){
        T=pop();
        printf("%d ", T->data);
        T=T->right;
        while(T!=NULL){
            push(T);
            T=T->left;
        }
    }
}

void postorder_non_recursive(struct node *T){
    struct node *prev=NULL;
    do{
    while(T!=NULL){
        push(T);
        T=T->left;
    }
    while(T==NULL && isempty()==0){
        T=peek();
        if(T->right == NULL || T->right == prev){
        printf("%d ", T->data);
        pop();
        prev=T;
        T=NULL;
        }
        else{
            T=T->right;
        }
    }
    }while(isempty()==0);
}


int main(){
    struct node *root=NULL;
    root = insert(root, 15);
    root = insert(root, 12);
    root = insert(root, 13);
    root= insert(root, 1);
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 17);
    root = insert(root, 100);
    root=insert(root, 11);
    root=insert(root, 9);
    root=insert(root, 8);
    printf("Successfully made BST");
    printf("\nSmallest entry is: %d", min(root));
    printf("\nLargest entry is: %d", max(root));
    printf("\nheight: %d\n", height(root));
    printf("Preorder traversal: ");
    preorder(root);
    printf("\n");
    printf("Inorder traversal: ");
    inorder(root);
    printf("\nPostorder traversal: ");
    postorder(root);
    printf("\nNon recursive preorder traversal: ");
    preorder_non_recursive(root);
    printf("\nNon recursive inorder traversal: ");
    inorder_non_recursive(root);
    printf("\nNon recursive postorder traversal: ");
    postorder_non_recursive(root);
    printf("\nnumber of nodes: %d", num_of_nodes);
}
