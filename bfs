#include <stdio.h>
#include <stdlib.h>
int n;

struct node {
    int vertex;
    struct node *next;
};

int queue[10];
int front=-1;
int rear=0;
void enqueue(int data){
    queue[rear]=data;
    rear++;
    if (front==-1){
        front+=1;
    }
}
int pop(){
    
    int temp = queue[front];
    front+=1;
    return temp;
}

int empty_queue(){
    if (front==rear||front == -1){
        return 1;
    }
    else{
        return 0;
    }
} 

void display(){
    for (int i=front; i<rear; i++){
        printf("%d ", queue[i]);
    }
}

struct node *A[10];

void init(int n){
    
    for(int i=0; i<n;i++){
        A[i]=NULL;
    }
    printf("Initialized successfully");
}

void create(){
    struct node *new=malloc(sizeof(struct node));
    struct node *P;
    char ch;
    int v1, v2;
    do{
        printf("\nEnter vertex1: ");
        scanf("%d", &v1);
        printf("\nEnter vertex2: ");
        scanf("%d", &v2);
        printf("here");
        new->vertex=v2;
        P=A[v1];
        printf("%p", P);
        if (P==NULL){
            A[v1]=new;
        }
        else{
            while(P->next!=NULL)
                {
                    P=P->next;
                }
            P->next = new;
        }   
        printf("heredone");
        
        struct node *new=malloc(sizeof(struct node));
        
        new->vertex=v1;
        P=A[v2];
        if (P==NULL){
            A[v2]=new;
        }
        else{
            while(P->next!=NULL){
                P=P->next;
            }
            P->next=new;
        }
        
        printf("More edges (Y/N): ");
        scanf("%s", &ch);
    }while(ch=='y'||ch=='Y');
}


void BFS(int n){
    int visited[10], v; 
    struct node *p;
    for(v=1; v<=n; v++){
        visited[v]=0;
    }
    printf("Enter start vertex: ");
    scanf("%d", &v);
    enqueue(v);
    visited[v]=1;
    while(empty_queue()==0){
        v=pop();
        printf("%d ", v);
        p=A[v];
        while(p!=NULL){
            if(visited[p->vertex]==0){
                enqueue(p->vertex);
                visited[p->vertex]=1;
            }
            p=p->next;
        }
    }
    
}

int main(){
    
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    init(n);
    create();
    BFS(n);
}
